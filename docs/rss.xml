<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Ronan</title><link>https://echozap.github.io</link><description>一个主修电子信息科学与技术又略懂计算机科学与艺术的「样样通、样样松」的佛系青年。接受过《中华人民共和国义务教育法》规定的完整「九年义务教育」，如今也是个「正儿八经」的「文化人」，目前的物理活动范围主要在「某东亚大国」。</description><copyright>Ronan</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cdn.jsdelivr.net/gh/EchoZap/echozap.github.io@main/static/avatar.avg</url><title>avatar</title><link>https://echozap.github.io</link></image><lastBuildDate>Sun, 28 Jul 2024 03:25:22 +0000</lastBuildDate><managingEditor>Ronan</managingEditor><ttl>60</ttl><webMaster>Ronan</webMaster><item><title>SSH 免密登录</title><link>https://echozap.github.io/post/SSH%20-mian-mi-deng-lu.html</link><description># 1创建密钥&#13;
&#13;
在本地主机终端输入&#13;
&#13;
```shell&#13;
ssh-keygen&#13;
```&#13;
&#13;
之后一路回车，不出意外的话，你将看到以下内容&#13;
&#13;
![img](https://cdn.jsdelivr.net/gh/EchoZap/echozap.github.io@main/static/imgs/ssh-keygen.png)&#13;
&#13;
恭喜，你已经完成第一步！&#13;
&#13;
---&#13;
&#13;
# 2检查密钥是否创建成功&#13;
&#13;
在终端输入&#13;
&#13;
```shell&#13;
ls .ssh&#13;
```&#13;
&#13;
看到以下内容&#13;
&#13;
![img](https://cdn.jsdelivr.net/gh/EchoZap/echozap.github.io@main/static/imgs/ls_.ssh.png)&#13;
&#13;
看到其中有`id_ed25519`(私钥))**其中的ed25519在不同设备可能会有不同，有的可能是id_rsa**、`id_ed25519.pub`(公钥)两个文件，恭喜，你已经完成第二步了，离成功更近了！&#13;
&#13;
---&#13;
&#13;
# 3将公钥复制到远程主机&#13;
&#13;
在终端键入&#13;
&#13;
```shell&#13;
ssh-copy-id -i &lt;~/.ssh/id_ed25519.pub&gt; &lt;username&gt;@&lt;remote_ip&gt;&#13;
```&#13;
&#13;
其中的`&lt;~/.ssh/id_ed25519.pub&gt;` 是公钥所处的路径，`&lt;username&gt;`是用户名，`&lt;remote_ip&gt;`是主机名或IP 地址。</description><guid isPermaLink="true">https://echozap.github.io/post/SSH%20-mian-mi-deng-lu.html</guid><pubDate>Sun, 28 Jul 2024 03:19:49 +0000</pubDate></item><item><title>Typora土图床自动上传脚本</title><link>https://echozap.github.io/post/Typora-tu-tu-chuang-zi-dong-shang-chuan-jiao-ben.html</link><description>&gt; typroa的图片上传脚本，针对[Telegraph-Image](https://github.com/cf-pages/Telegraph-Image)项目，适用于macOS和Linux系统。</description><guid isPermaLink="true">https://echozap.github.io/post/Typora-tu-tu-chuang-zi-dong-shang-chuan-jiao-ben.html</guid><pubDate>Sun, 28 Jul 2024 03:03:04 +0000</pubDate></item><item><title>sdcc编译与链接</title><link>https://echozap.github.io/post/sdcc-bian-yi-yu-lian-jie.html</link><description>## 1.编译源文件&#13;
&#13;
首先，你需要编译你的源文件（例如 `main.c`）以生成目标文件（.rel）。</description><guid isPermaLink="true">https://echozap.github.io/post/sdcc-bian-yi-yu-lian-jie.html</guid><pubDate>Sat, 27 Jul 2024 07:37:39 +0000</pubDate></item><item><title>shell 编程</title><link>https://echozap.github.io/post/shell%20-bian-cheng.html</link><description># 一、运算符&#13;
&#13;
## 1、算术运算符&#13;
&#13;
下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：&#13;
&#13;
|运算符|说明|举例|&#13;
| :----: | :-------------------------------------------: | :------------------------: |&#13;
|+|加法|`expr $a + $b` 结果为 30。</description><guid isPermaLink="true">https://echozap.github.io/post/shell%20-bian-cheng.html</guid><pubDate>Sat, 27 Jul 2024 07:33:17 +0000</pubDate></item><item><title>vscode搭建用于8051单片机的sdcc环境</title><link>https://echozap.github.io/post/vscode-da-jian-yong-yu-8051-dan-pian-ji-de-sdcc-huan-jing.html</link><description>## 查找sdcc以及8051头文件位置&#13;
&#13;
```shell&#13;
❯ which sdcc&#13;
&#13;
/opt/homebrew/bin//sdcc&#13;
```&#13;
&#13;
这将列出sdcc的安装位置。</description><guid isPermaLink="true">https://echozap.github.io/post/vscode-da-jian-yong-yu-8051-dan-pian-ji-de-sdcc-huan-jing.html</guid><pubDate>Sat, 27 Jul 2024 07:26:20 +0000</pubDate></item><item><title>vscode磨砂效果配置</title><link>https://echozap.github.io/post/vscode-mo-sha-xiao-guo-pei-zhi.html</link><description>## 1.安装插件&#13;
&#13;
[[Apc Customize UI++ ](https://marketplace.visualstudio.com/items?itemName=drcika.apc-extension)](https://marketplace.visualstudio.com/items?itemName=drcika.apc-extension)&#13;
&#13;
## 2.下载图片&#13;
&#13;
![Noisefigure](https://cdn.jsdelivr.net/gh/EchoZap/echozap.github.io@main/static/imgs/noisefigure.png)&#13;
&#13;
## 3.配置文件&#13;
&#13;
在vscode的`.settings.json`中键入以下配置，**注意：** 将`/Users/einson/Pictures/vscbg/Noisefigure.png`修改为自己的文件路径&#13;
&#13;
```json&#13;
'apc.stylesheet': {&#13;
    'body': {&#13;
        'background-image': 'url(/Users/einson/Pictures/vscbg/Noisefigure.png), linear-gradient(to top,rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.2))',&#13;
        'background-size': 'cover',&#13;
        'background-blend-mode': 'multiply',&#13;
        'background-repeat': 'no-repeat',&#13;
        'opacity': 0.89&#13;
    },&#13;
}&#13;
```&#13;
&#13;
## 4.意想不到的问题(无问题可忽略)&#13;
&#13;
有可能最终配置效果不尽人意，所以在这里可以安装一款字体(可选)，在vscode的`.settings.json`键入以下内容。</description><guid isPermaLink="true">https://echozap.github.io/post/vscode-mo-sha-xiao-guo-pei-zhi.html</guid><pubDate>Sat, 27 Jul 2024 01:44:00 +0000</pubDate></item><item><title>PlatformIO烧录失败解决方法</title><link>https://echozap.github.io/post/PlatformIO-shao-lu-shi-bai-jie-jue-fang-fa.html</link><description>## 遭遇问题&#13;
​***platformIO一直卡在烧录程序中，导致开发版一直处于断电状态***&#13;
![问题](https://cdn.jsdelivr.net/gh/EchoZap/echozap.github.io@main/static/imgs/question.png)&#13;
&#13;
&#13;
## 解决方法&#13;
&#13;
将main.py里的这一行注释即可&#13;
![解决1](https://cdn.jsdelivr.net/gh/EchoZap/echozap.github.io@main/static/imgs/method1.png)&#13;
&#13;
&#13;
该文件在以下路径&#13;
![解决2](https://cdn.jsdelivr.net/gh/EchoZap/echozap.github.io@main/static/imgs/method2.png)&#13;
。</description><guid isPermaLink="true">https://echozap.github.io/post/PlatformIO-shao-lu-shi-bai-jie-jue-fang-fa.html</guid><pubDate>Sat, 22 Jun 2024 07:16:18 +0000</pubDate></item></channel></rss>